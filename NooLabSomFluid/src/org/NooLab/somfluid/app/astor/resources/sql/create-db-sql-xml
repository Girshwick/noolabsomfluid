<?xml version="1.0" encoding="utf-8"?>
        
  <astor>
	<database name="astornodes" extensions="-L*;-id*">
	  <!-- this database is owned by astor
	  	   there are 4 tables:  
	  	      somnames, nodecontent, nodefingerprints, nodeneighborhoods
	  	   the extension refers to the allowed extensions of the name: if the requested name matches "name"+"extension"  
		   -->
      <config>
         <separator name="::" />
      </config>
      <!-- comment within the sql script is between pairs of * , i.e.   ** ... ** -->

	  <access>
	     <users>
	        <user id="1" name="rg" password="rg" properties="" operation="RW" />
	        <user id="2" name="astor" password="astor"  properties="" operation="RW" />
	        <user id="3" name="texx" password="texx"  properties="" operation="RW" />
	        <user id="4" name="sf" password="sf"  properties="" operation="RW" />
	     </users>
	  </access>
      <table name="somnames" >
         <!-- this table is important for persistence !!!
              on instantiation, the somLattice has to get its SomID !!!
              there could be several SOMs!!!  
              -->
         <create>
            <drop active="1" cmd="DROP TABLE IF EXISTS ::tablename::" />
            <text  name="somnames" >
                CREATE TABLE  ::tablename:: (
                      id             IDENTITY PRIMARY KEY,  
					  somid          BIGINT,
					                              ** it is created by the lattice itself, if the table is empty ,
					                                 a lattice usually knows (by means of its own ini-storage), whether
					                                 it has a known somid, whether it has offspring SOMs, and which are their names... 
					                              ** 
					  tablename      VARCHAR(40), ** the name of the "nodecontent" table(s) where the som can be found **
					  timestamp      BIGINT,
					  fingerprint    VARCHAR      ** the numerical vector, which we need for reproducible compression **  
					  )
		    </text>	
		    <!-- large maps create large histograms, possibly in the range of 20'000+ !
              thus we will need to compress the resulting histograms (that are created for each document), 
              which will have the dimensionality;
              compressing is done by random projection;
              in order to create the same compression for the same input data, we need a
              numerical representation of the name
              -->
		    
         </create>
      </table>


      <table name="nodecontent" >
         <!-- this table helps in navigating on behalf of a particular docid, e.g. for
                  - creating the histograms 
                  - creating a sequence of nodes as representations of the sequence of words in a text

              for a given document (docid), a series of words can be translated into
              a series of nodes: it is simply the ordered list of all contexts
              (along the contextid) for a given document
              
              the nodes are identified by names (=coordinates as string) and 
              by numerical fingerprints
              Thus, we can set up a 

              -->
         <create>
            <drop active="1" cmd="DROP TABLE IF EXISTS ::tablename::" />
                 <!-- NO COMMENT INSIDE THE <text>-node !!! 
                 -->
            <text name="nodecontent" >
                CREATE TABLE  ::tablename:: (  
					  id             IDENTITY PRIMARY KEY,
					  somid          BIGINT,       ** the id of the som as it is stored in the table somnames** 
					  nodeid         BIGINT ,      ** the numerical GUID from nodefingerprints **
					  docid          BIGINT,       ** a particular node may contain various context and various words,
					                                  where word refers to the "center" position of the context**                                        
					  fingerprintid  BIGINT ,      ** if word, the same value as in database "rg-fingerprint" ! 
					                                  if sentence, then the same value as in ....  **                         
					  contextid      BIGINT        ** for the same word there might be different contexts **
					  )
		    </text>	
         </create>
      </table>

      <table name="nodefingerprints" >
         <!-- in some cases we need a random graph of the sequence of nodes;
              for doing this, we need a numerical representation of the name == a fingerprint vector, 
              which is used in the same way as we use it for words;
              
              we also will need to compress the , we have to apply random projection
              for the nodes as we did it for words 
              -->
         <create>
            <drop active="1" cmd="DROP TABLE IF EXISTS ::tablename::" />
            <text name="nodefingerprints">
                CREATE TABLE  ::tablename:: (  
					  
					  id             IDENTITY PRIMARY KEY ,     
					  
					  numguid        BIGINT,
					                               ** the numerical GUID of the node  **
					  somid          BIGINT ,      ** the id of the SOM that is hosting the node
					  								  we need a uniqueness constraint for it		 
					                               **  
					  runindex       INT,          ** this index we can use to retrieve the entry on establishing an Astor SomLattice
					                                  the same node-index will always use the same fingerprint  
					                               **
					  locationx      DOUBLE,  
					  locationy      DOUBLE,  
					  locationz      DOUBLE,  
					  fingerprint    VARCHAR(2000) ** if word, the same value as in database "rg-fingerprint" ! 
					                                  if sentence, then the same value as in ....  **                         
					  
					  )
		    </text>	
         </create>              
      </table>      

	  
      <table name="nodeneighborhoods" >
         <!-- we have at most 8+4 direct neighbors in an extended grid, and 11 neighbors in a hex grid
              where "extended" means temporary densified, i.e. a grid that is not perfectly regular due to 
              node divisions;
              We have 17 neighbors in rectangular grid if we take two layers.
              
              This table is necessary to determine neighborhoods without the necessity to load the whole SomLattice;
              
              Note that we are NOT interested in the physical distance in most queries. We refer to the physical
              distance here only implicitly, as it circumscribes the area where we expect the first layer of surrounding
              neighbors.
              Such these neighbors here are also NOT always identical to the connected neighbors, as a connected neighbor
              might be far away in physical terms (axon like nodes)
                  
              if we are interested in the physical distance, we will have to load the SomLattice
              
              The query will be a nested select (distinct), grouped by nodeid;
              note that the neighborhoods overlap, of course!!
              ELse, not all of the neighbor fields in the rows need to be filled 
              -->
              
         <create>
            <drop active="1" cmd="DROP TABLE IF EXISTS ::tablename::" />
            <text name="nodeneighborhoods">
                CREATE TABLE  ::tablename:: (  
					  
					  id             IDENTITY PRIMARY KEY ,     
                      nodeid         BIGINT,
                      nnb0           BIGINT,
                      nnb1           BIGINT,
                      nnb2           BIGINT,
                      nnb3           BIGINT,
                      nnb4           BIGINT,
                      nnb5           BIGINT,
                      nnb6           BIGINT,
                      nnb7           BIGINT,
                      nnb8           BIGINT,
                      nnb9           BIGINT,
                      nnb10          BIGINT,
                      nnb11          BIGINT,
                      nnb12          BIGINT,
                      nnb13          BIGINT,
                      nnb14          BIGINT,
                      nnb15          BIGINT,
                      nnb16          BIGINT
                   )
		    </text>	
         </create>              
      </table>      

    </database> 

    <!-- further databases here -->
    <database name="rg-test-112233">
    
    </database>
     
  </astor>
